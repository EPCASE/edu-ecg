"""
Outil d'import ECG intelligent avec recadrage et export unifi√©
Solution pour standardiser tous les formats vers un format commun
"""

import streamlit as st
import streamlit.components.v1 as components
from PIL import Image, ImageDraw
import base64
import json
import os
from pathlib import Path
import io
import uuid
from datetime import datetime

def smart_ecg_importer():
    """
    Interface d'import ECG intelligent avec recadrage et standardisation
    """
    
    st.header("üì• Import ECG Intelligent - Avec Recadrage")
    st.markdown("**Importez n'importe quel format ‚Üí Recadrez l'ECG ‚Üí Exportez vers format standard**")
    
    # Indicateur de progression
    progress_col1, progress_col2, progress_col3 = st.columns(3)
    
    with progress_col1:
        if 'uploaded_file_data' not in st.session_state:
            st.markdown("üîÑ **1. Upload** ‚Üê Vous √™tes ici")
        else:
            st.markdown("‚úÖ **1. Upload** (Termin√©)")
    
    with progress_col2:
        if 'uploaded_file_data' in st.session_state and 'cropped_ecg' not in st.session_state:
            st.markdown("üîÑ **2. Recadrage** ‚Üê √âtape suivante")
        elif 'cropped_ecg' in st.session_state:
            st.markdown("‚úÖ **2. Recadrage** (Termin√©)")
        else:
            st.markdown("‚è≥ **2. Recadrage**")
    
    with progress_col3:
        if 'cropped_ecg' in st.session_state:
            st.markdown("üîÑ **3. Export** ‚Üê √âtape finale")
        else:
            st.markdown("‚è≥ **3. Export**")
    
    st.markdown("---")
    
    # Interface √† onglets
    tab1, tab2, tab3 = st.tabs(["üì§ Upload", "‚úÇÔ∏è Recadrage", "üíæ Export"])
    
    with tab1:
        _interface_upload()
    
    with tab2:
        if 'uploaded_file_data' in st.session_state:
            st.success("üìÅ Fichier charg√© ! Interface de recadrage disponible ci-dessous :")
            _interface_recadrage()
        else:
            st.info("üí° Uploadez d'abord un fichier dans l'onglet 'Upload'")
    
    with tab3:
        if 'cropped_ecg' in st.session_state:
            st.success("‚úÇÔ∏è ECG recadr√© ! Interface d'export disponible ci-dessous :")
            _interface_export()
        else:
            st.info("üí° Recadrez d'abord l'ECG dans l'onglet 'Recadrage'")

def _interface_upload():
    """Interface d'upload de fichiers"""
    
    st.subheader("üì§ Upload de fichier ECG")
    
    # Upload de fichier
    uploaded_file = st.file_uploader(
        "Choisissez votre fichier ECG",
        type=['pdf', 'png', 'jpg', 'jpeg', 'xml'],
        help="Formats support√©s : PDF, PNG, JPG, JPEG, XML"
    )
    
    if uploaded_file is not None:
        file_extension = Path(uploaded_file.name).suffix.lower()
        
        # Affichage des informations du fichier
        col1, col2 = st.columns([2, 1])
        
        with col2:
            st.markdown("#### üìä Informations")
            st.write(f"**Nom :** {uploaded_file.name}")
            st.write(f"**Type :** {file_extension.upper()}")
            st.write(f"**Taille :** {len(uploaded_file.getvalue()) / 1024:.1f} KB")
        
        with col1:
            # Traitement selon le format
            if file_extension == '.pdf':
                success = _traiter_pdf(uploaded_file)
            elif file_extension in ['.png', '.jpg', '.jpeg']:
                success = _traiter_image(uploaded_file)
            elif file_extension == '.xml':
                success = _traiter_xml(uploaded_file)
            else:
                st.error(f"‚ùå Format {file_extension} non support√©")
                success = False
            
            if success:
                st.success("‚úÖ Fichier trait√© avec succ√®s !")
                
                # Notification pour passer au recadrage
                st.markdown("---")
                st.info("üéØ **√âtape suivante :** Cliquez sur l'onglet **'‚úÇÔ∏è Recadrage'** ci-dessus pour recadrer votre ECG")
                
                # Bouton pour forcer le rechargement de l'interface
                if st.button("üîÑ Actualiser l'interface", type="secondary"):
                    st.rerun()

def _traiter_pdf(uploaded_file):
    """Traite les fichiers PDF"""
    
    st.markdown("#### üìÑ PDF d√©tect√©")
    
    # Sauvegarder temporairement
    temp_pdf_path = f"temp_{uploaded_file.name}"
    with open(temp_pdf_path, "wb") as f:
        f.write(uploaded_file.getvalue())
    
    try:
        file_size_mb = len(uploaded_file.getvalue()) / (1024 * 1024)
        
        if file_size_mb > 2:
            # PDF volumineux - proposer t√©l√©chargement pour traitement externe
            st.warning(f"‚ö†Ô∏è PDF volumineux ({file_size_mb:.1f} MB)")
            st.info("üí° **Solution recommand√©e :** Convertissez le PDF en image avant import")
            
            st.download_button(
                label="üì• T√©l√©charger PDF",
                data=uploaded_file.getvalue(),
                file_name=uploaded_file.name,
                mime="application/pdf"
            )
            
            st.markdown("**Instructions :**")
            st.markdown("1. Ouvrez le PDF t√©l√©charg√©")
            st.markdown("2. Faites une capture d'√©cran de l'ECG (Windows+Shift+S)")
            st.markdown("3. Sauvegardez en PNG/JPG")
            st.markdown("4. R√©importez l'image ici")
            
            # Interface PDF.js pour visualisation
            st.markdown("---")
            st.markdown("#### üìñ Visualisation PDF (pour capture)")
            
            # Cr√©er un viewer PDF.js simple
            pdf_base64 = base64.b64encode(uploaded_file.getvalue()).decode()
            
            iframe_html = f"""
            <div style="border: 2px dashed #ccc; padding: 20px; text-align: center;">
                <p><strong>üì± Pour capturer l'ECG :</strong></p>
                <p>1. Cliquez sur le lien ci-dessous pour ouvrir le PDF</p>
                <p>2. Utilisez Windows+Shift+S pour capturer l'ECG</p>
                <p>3. Sauvegardez et r√©importez l'image</p>
                <br>
                <a href="data:application/pdf;base64,{pdf_base64}" target="_blank" 
                   style="background: #0066cc; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
                   üîó Ouvrir PDF dans un nouvel onglet
                </a>
            </div>
            """
            
            st.components.v1.html(iframe_html, height=200)
            
            # Stockage pour l'√©tape suivante
            st.session_state.uploaded_file_data = {
                'type': 'pdf_large',
                'filename': uploaded_file.name,
                'size_mb': file_size_mb,
                'data': uploaded_file.getvalue()
            }
            
            return True
            
        else:
            # PDF de taille raisonnable - proposer visualisation et capture
            st.info("üìÑ PDF d√©tect√© - Visualisation et capture recommand√©e")
            
            # Interface de visualisation et capture
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.markdown("#### ÔøΩ Visualiseur PDF")
                
                # Cr√©er un viewer PDF.js
                pdf_base64 = base64.b64encode(uploaded_file.getvalue()).decode()
                
                # Essayer d'abord un iframe PDF.js
                iframe_html = f"""
                <iframe 
                    src="https://mozilla.github.io/pdf.js/web/viewer.html?file=data:application/pdf;base64,{pdf_base64}" 
                    width="100%" 
                    height="500" 
                    style="border: 1px solid #ccc;">
                </iframe>
                """
                
                st.components.v1.html(iframe_html, height=520)
            
            with col2:
                st.markdown("#### üéØ Instructions de capture")
                st.markdown("**1.** Visualisez l'ECG dans le viewer √† gauche")
                st.markdown("**2.** Utilisez **Windows+Shift+S** pour capturer")
                st.markdown("**3.** S√©lectionnez uniquement la zone ECG")
                st.markdown("**4.** Sauvegardez l'image (PNG/JPG)")
                st.markdown("**5.** R√©importez l'image captur√©e")
                
                st.markdown("---")
                st.markdown("#### üì• Alternative")
                st.download_button(
                    label="üìÑ T√©l√©charger PDF",
                    data=uploaded_file.getvalue(),
                    file_name=uploaded_file.name,
                    mime="application/pdf"
                )
            
            # Essayer conversion automatique si pdf2image disponible
            conversion_attempted = False
            try:
                from pdf2image import convert_from_path
                
                st.markdown("---")
                st.info("üîÑ Tentative de conversion automatique...")
                
                # Convertir la premi√®re page
                images = convert_from_path(temp_pdf_path, first_page=1, last_page=1, dpi=200)
                
                if images:
                    image = images[0]
                    
                    st.success("‚úÖ Conversion automatique r√©ussie !")
                    st.image(image, caption="PDF converti en image", use_container_width=True)
                    
                    # Stocker pour le recadrage
                    st.session_state.uploaded_file_data = {
                        'type': 'pdf_converted',
                        'filename': uploaded_file.name,
                        'image': image,
                        'original_data': uploaded_file.getvalue()
                    }
                    
                    conversion_attempted = True
                    
            except ImportError:
                # pdf2image non disponible - c'est normal
                pass
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Conversion automatique √©chou√©e : {e}")
            
            # Si pas de conversion automatique, proposer workflow manuel
            if not conversion_attempted:
                st.session_state.uploaded_file_data = {
                    'type': 'pdf_manual',
                    'filename': uploaded_file.name,
                    'data': uploaded_file.getvalue(),
                    'size_mb': file_size_mb
                }
            
            return True
                
    except Exception as e:
        st.error(f"‚ùå Erreur traitement PDF : {e}")
        return False
    
    finally:
        # Nettoyer le fichier temporaire
        if os.path.exists(temp_pdf_path):
            os.remove(temp_pdf_path)

def _traiter_image(uploaded_file):
    """Traite les fichiers image"""
    
    st.markdown("#### üñºÔ∏è Image d√©tect√©e")
    
    try:
        # Charger l'image
        image = Image.open(uploaded_file)
        
        # Affichage de l'image
        st.image(image, caption=f"Image ECG - {uploaded_file.name}", use_container_width=True)
        
        # Informations d√©taill√©es
        st.write(f"**Dimensions :** {image.size[0]} √ó {image.size[1]} pixels")
        st.write(f"**Mode :** {image.mode}")
        
        # Stockage pour le recadrage
        st.session_state.uploaded_file_data = {
            'type': 'image',
            'filename': uploaded_file.name,
            'image': image,
            'original_data': uploaded_file.getvalue()
        }
        
        st.success("‚úÖ Image charg√©e avec succ√®s !")
        return True
        
    except Exception as e:
        st.error(f"‚ùå Erreur lecture image : {e}")
        return False

def _traiter_xml(uploaded_file):
    """Traite les fichiers XML"""
    
    st.markdown("#### üìã XML d√©tect√©")
    
    try:
        # Lire le contenu XML
        xml_content = uploaded_file.getvalue().decode('utf-8')
        
        # Affichage du contenu (aper√ßu)
        with st.expander("üìÑ Aper√ßu du contenu XML"):
            st.code(xml_content[:1000], language='xml')
            if len(xml_content) > 1000:
                st.caption("... (contenu tronqu√©)")
        
        # Analyse du type XML
        xml_type = "XML G√©n√©rique"
        if 'HL7' in xml_content:
            xml_type = "HL7 CDA"
        elif 'FDA-XML' in xml_content:
            xml_type = "FDA XML"
        elif 'waveform' in xml_content.lower():
            xml_type = "XML ECG"
        
        st.info(f"üí° Type d√©tect√© : {xml_type}")
        
        # Stockage pour traitement
        st.session_state.uploaded_file_data = {
            'type': 'xml',
            'filename': uploaded_file.name,
            'content': xml_content,
            'xml_type': xml_type,
            'original_data': uploaded_file.getvalue()
        }
        
        st.success("‚úÖ XML analys√© avec succ√®s !")
        st.info("üí° Les fichiers XML seront trait√©s comme m√©tadonn√©es")
        return True
        
    except Exception as e:
        st.error(f"‚ùå Erreur lecture XML : {e}")
        return False

def _interface_recadrage():
    """Interface de recadrage de l'ECG"""
    
    st.subheader("‚úÇÔ∏è Recadrage de l'ECG")
    
    file_data = st.session_state.uploaded_file_data
    
    if file_data['type'] in ['image', 'pdf_converted']:
        _recadrage_interactif(file_data['image'])
    elif file_data['type'] == 'pdf_large':
        st.warning("‚ö†Ô∏è PDF volumineux - Capture d'√©cran requise")
        st.info("üí° Suivez les instructions dans l'onglet Upload pour capturer l'ECG")
        
        # Rappel des instructions
        st.markdown("""
        ### üì∑ Comment capturer l'ECG :
        1. **Ouvrez le PDF** (lien dans l'onglet Upload)
        2. **Capturez l'√©cran** : Windows+Shift+S
        3. **S√©lectionnez la zone ECG** uniquement
        4. **Sauvegardez** l'image (PNG/JPG recommand√©)
        5. **Revenez √† l'onglet Upload** et importez l'image captur√©e
        """)
        
    elif file_data['type'] == 'pdf_manual':
        st.info("ÔøΩ PDF en attente de capture")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("#### üìñ Rappel - Visualiseur PDF")
            
            # Recr√©er le viewer PDF.js
            pdf_base64 = base64.b64encode(file_data['data']).decode()
            
            iframe_html = f"""
            <iframe 
                src="https://mozilla.github.io/pdf.js/web/viewer.html?file=data:application/pdf;base64,{pdf_base64}" 
                width="100%" 
                height="400" 
                style="border: 1px solid #ccc;">
            </iframe>
            """
            
            st.components.v1.html(iframe_html, height=420)
        
        with col2:
            st.markdown("#### üéØ Guide de capture")
            st.markdown("**√âtapes √† suivre :**")
            st.markdown("1. üëÄ Visualisez l'ECG √† gauche")
            st.markdown("2. ‚å®Ô∏è **Windows+Shift+S**")
            st.markdown("3. üéØ S√©lectionnez zone ECG")
            st.markdown("4. üíæ Sauvegardez l'image")
            st.markdown("5. üîÑ R√©importez dans Upload")
            
            st.markdown("---")
            st.markdown("#### ‚ö° Raccourci")
            st.markdown("Au lieu de capturer, vous pouvez :")
            
            if st.button("üìÅ Importer image directement", type="secondary"):
                st.info("üí° Utilisez l'onglet Upload pour importer votre image captur√©e")
        
        st.markdown("---")
        st.warning("üîÑ **Workflow recommand√© :** Capturez l'ECG puis revenez √† l'onglet Upload pour importer l'image")
    elif file_data['type'] == 'xml':
        st.info("üìã Fichier XML - Pas de recadrage n√©cessaire")
        st.markdown("Les donn√©es XML seront utilis√©es comme m√©tadonn√©es")
        # Passer directement √† l'export
        st.session_state.cropped_ecg = {
            'type': 'xml',
            'data': file_data
        }

def _recadrage_interactif(image):
    """Interface de recadrage interactif"""
    
    st.markdown("#### üéØ S√©lectionnez la zone ECG √† conserver")
    
    # Redimensionner l'image pour l'affichage si trop grande
    display_image = image.copy()
    max_display_width = 800
    
    if display_image.width > max_display_width:
        ratio = max_display_width / display_image.width
        new_height = int(display_image.height * ratio)
        display_image = display_image.resize((max_display_width, new_height), Image.Resampling.LANCZOS)
    
    # Contr√¥les de recadrage
    col1, col2 = st.columns([3, 1])
    
    with col2:
        st.markdown("#### ‚öôÔ∏è Contr√¥les")
        
        # Coordonn√©es de recadrage
        x1 = st.slider("X d√©but", 0, display_image.width, 0)
        y1 = st.slider("Y d√©but", 0, display_image.height, 0)
        x2 = st.slider("X fin", x1, display_image.width, display_image.width)
        y2 = st.slider("Y fin", y1, display_image.height, display_image.height)
        
        # Pr√©sets courants
        st.markdown("#### üìê Pr√©sets")
        if st.button("ü´Ä ECG Standard"):
            # Recadrage typique ECG (centre de l'image)
            margin = 50
            st.session_state.crop_coords = (
                margin, margin, 
                display_image.width - margin, 
                display_image.height - margin
            )
            st.rerun()
        
        if st.button("üìÑ Page compl√®te"):
            st.session_state.crop_coords = (0, 0, display_image.width, display_image.height)
            st.rerun()
    
    with col1:
        # Image avec zone de recadrage
        cropped_preview = display_image.crop((x1, y1, x2, y2))
        
        st.markdown("**üñºÔ∏è Image originale :**")
        st.image(display_image, use_container_width=True)
        
        st.markdown("**‚úÇÔ∏è Aper√ßu recadr√© :**")
        st.image(cropped_preview, use_container_width=True)
        
        # Valider le recadrage
        if st.button("‚úÖ Valider ce recadrage", type="primary"):
            # Calculer les coordonn√©es sur l'image originale
            scale_x = image.width / display_image.width
            scale_y = image.height / display_image.height
            
            real_x1 = int(x1 * scale_x)
            real_y1 = int(y1 * scale_y)
            real_x2 = int(x2 * scale_x)
            real_y2 = int(y2 * scale_y)
            
            # Recadrer l'image originale
            cropped_original = image.crop((real_x1, real_y1, real_x2, real_y2))
            
            # Stocker le r√©sultat
            st.session_state.cropped_ecg = {
                'type': 'image',
                'image': cropped_original,
                'coordinates': (real_x1, real_y1, real_x2, real_y2),
                'original_filename': st.session_state.uploaded_file_data['filename']
            }
            
            st.success("‚úÖ Recadrage valid√© ! Passez √† l'export.")
            st.balloons()

def _interface_export():
    """Interface d'export vers format standard"""
    
    st.subheader("üíæ Export vers Format Standard")
    
    cropped_data = st.session_state.cropped_ecg
    
    # Informations sur l'ECG recadr√©
    col1, col2 = st.columns([2, 1])
    
    with col2:
        st.markdown("#### üìä M√©tadonn√©es")
        
        # Informations automatiques
        case_id = st.text_input("ID du cas", value=f"ecg_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{uuid.uuid4().hex[:8]}")
        
        filename = st.text_input("Nom du fichier", value=f"{case_id}.png")
        
        # M√©tadonn√©es cliniques
        st.markdown("#### üè• Contexte clinique")
        age = st.number_input("√Çge patient", min_value=0, max_value=120, value=65)
        sexe = st.selectbox("Sexe", ["M", "F", "Non sp√©cifi√©"])
        contexte = st.text_area("Contexte clinique", placeholder="Ex: Douleur thoracique, dyspn√©e...")
        diagnostic = st.text_area("Diagnostic", placeholder="Ex: Rythme sinusal, BBD...")
    
    with col1:
        if cropped_data['type'] == 'image':
            # Affichage de l'image recadr√©e
            st.markdown("#### üìÑ ECG final")
            st.image(cropped_data['image'], caption="ECG recadr√© pr√™t pour export", use_container_width=True)
            
            # Informations techniques
            st.write(f"**Dimensions :** {cropped_data['image'].size[0]} √ó {cropped_data['image'].size[1]} pixels")
        
        elif cropped_data['type'] == 'xml':
            st.markdown("#### üìã Donn√©es XML")
            st.info("Fichier XML trait√© comme m√©tadonn√©es")
    
    # Bouton d'export
    st.markdown("---")
    
    if st.button("üöÄ Exporter vers la liseuse", type="primary"):
        success = _executer_export(case_id, filename, cropped_data, {
            'age': age,
            'sexe': sexe,
            'contexte': contexte,
            'diagnostic': diagnostic
        })
        
        if success:
            st.success("üéâ ECG export√© avec succ√®s vers la liseuse !")
            st.balloons()
            
            # Proposer de continuer
            if st.button("‚ûï Importer un autre ECG"):
                # Nettoyer la session
                for key in ['uploaded_file_data', 'cropped_ecg']:
                    if key in st.session_state:
                        del st.session_state[key]
                st.rerun()

def _executer_export(case_id, filename, cropped_data, metadata):
    """Ex√©cute l'export vers le format standard"""
    
    try:
        # Cr√©er le r√©pertoire de destination
        export_dir = Path("data/ecg_cases") / case_id
        export_dir.mkdir(parents=True, exist_ok=True)
        
        if cropped_data['type'] == 'image':
            # Sauvegarder l'image
            image_path = export_dir / filename
            cropped_data['image'].save(image_path, 'PNG', optimize=True)
            
            file_path = str(image_path)
            
        elif cropped_data['type'] == 'xml':
            # Sauvegarder le XML
            xml_path = export_dir / f"{case_id}.xml"
            with open(xml_path, 'w', encoding='utf-8') as f:
                f.write(cropped_data['data']['content'])
            
            file_path = str(xml_path)
        
        # Cr√©er les m√©tadonn√©es JSON
        metadata_json = {
            'case_id': case_id,
            'filename': filename,
            'file_path': file_path,
            'created_date': datetime.now().isoformat(),
            'type': cropped_data['type'],
            'age': metadata['age'],
            'sexe': metadata['sexe'],
            'contexte': metadata['contexte'],
            'diagnostic': metadata['diagnostic'],
            'statut': 'imported',
            'metadata': {
                'source_file': st.session_state.uploaded_file_data['filename'],
                'import_method': 'smart_importer'
            }
        }
        
        # Si image, ajouter les dimensions
        if cropped_data['type'] == 'image':
            metadata_json['dimensions'] = {
                'width': cropped_data['image'].size[0],
                'height': cropped_data['image'].size[1]
            }
            if 'coordinates' in cropped_data:
                metadata_json['crop_coordinates'] = cropped_data['coordinates']
        
        # Sauvegarder les m√©tadonn√©es
        metadata_path = export_dir / 'metadata.json'
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata_json, f, indent=2, ensure_ascii=False)
        
        st.success(f"‚úÖ Fichiers sauvegard√©s dans : {export_dir}")
        return True
        
    except Exception as e:
        st.error(f"‚ùå Erreur export : {e}")
        return False

# Interface principale
if __name__ == "__main__":
    st.set_page_config(
        page_title="Import ECG Intelligent", 
        page_icon="üì•",
        layout="wide"
    )
    
    st.title("üì• Import ECG Intelligent - Avec Recadrage")
    smart_ecg_importer()
