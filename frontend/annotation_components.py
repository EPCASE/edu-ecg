#!/usr/bin/env python3
"""
Composants d'annotation semi-automatique avec ontologie ECG
"""

import streamlit as st
from pathlib import Path
import json
from typing import List, Dict, Set

# Ontologie ECG structur√©e pour l'autocompl√©tion
ECG_ONTOLOGY = {
    "rythme": [
        "Rythme sinusal", "Fibrillation auriculaire", "Flutter auriculaire", 
        "Tachycardie sinusale", "Bradycardie sinusale", "Arythmie sinusale",
        "Tachycardie supraventriculaire", "Tachycardie ventriculaire",
        "Fibrillation ventriculaire", "Rythme jonctionnel", "Rythme idioventriculaire"
    ],
    "conduction": [
        "BAV 1er degr√©", "BAV 2√®me degr√© Mobitz 1", "BAV 2√®me degr√© Mobitz 2",
        "BAV 3√®me degr√©", "Bloc de branche droit", "Bloc de branche gauche",
        "H√©mibloc ant√©rieur gauche", "H√©mibloc post√©rieur gauche",
        "Pr√©excitation", "Syndrome de Wolff-Parkinson-White"
    ],
    "morphologie": [
        "Onde P normale", "Onde P bifide", "Onde P ample", "Absence d'onde P",
        "QRS fin", "QRS large", "QRS fragment√©", "Onde Q pathologique",
        "Onde R pr√©dominante", "Onde T invers√©e", "Onde T ample", "Onde T plate",
        "Sus-d√©calage ST", "Sous-d√©calage ST", "Onde U pr√©sente"
    ],
    "intervalles": [
        "PR court", "PR long", "PR normal", "QT court", "QT long", "QT normal",
        "QRS < 120ms", "QRS > 120ms", "Intervalle RR r√©gulier", "Intervalle RR irr√©gulier"
    ],
    "pathologie": [
        "Infarctus aigu", "Infarctus ancien", "Isch√©mie myocardique", "P√©ricardite",
        "Myocardite", "Hypertrophie ventriculaire gauche", "Hypertrophie ventriculaire droite",
        "Hypertrophie auriculaire gauche", "Hypertrophie auriculaire droite",
        "Syndrome coronarien aigu", "STEMI", "NSTEMI"
    ],
    "√©lectrolytes": [
        "Hyperkali√©mie", "Hypokali√©mie", "Hypercalc√©mie", "Hypocalc√©mie",
        "Hypermagn√©s√©mie", "Hypomagn√©s√©mie"
    ],
    "autres": [
        "Pacemaker", "D√©fibrillateur implantable", "Art√©facts", "Mauvaise qualit√© du trac√©",
        "Extrasystoles auriculaires", "Extrasystoles ventriculaires", "Big√©minisme",
        "Trig√©minisme", "Torsade de pointes", "Syndrome du QT long cong√©nital"
    ]
}

def get_ontology_concepts() -> List[str]:
    """Retourne tous les concepts de l'ontologie ECG"""
    all_concepts = []
    for category, concepts in ECG_ONTOLOGY.items():
        all_concepts.extend(concepts)
    return sorted(all_concepts)

def get_filtered_suggestions(search_term: str, selected_tags: Set[str], max_suggestions: int = 10) -> List[Dict[str, str]]:
    """
    Retourne des suggestions filtr√©es bas√©es sur le terme de recherche
    
    Args:
        search_term: Terme recherch√© par l'utilisateur
        selected_tags: Tags d√©j√† s√©lectionn√©s (pour les exclure)
        max_suggestions: Nombre maximum de suggestions
    
    Returns:
        Liste de dictionnaires avec 'concept' et 'category'
    """
    if not search_term or len(search_term) < 2:
        return []
    
    search_lower = search_term.lower()
    suggestions = []
    
    for category, concepts in ECG_ONTOLOGY.items():
        for concept in concepts:
            # Exclure les concepts d√©j√† s√©lectionn√©s
            if concept in selected_tags:
                continue
                
            # Recherche flexible
            concept_lower = concept.lower()
            if (search_lower in concept_lower or 
                concept_lower.startswith(search_lower) or
                any(word.startswith(search_lower) for word in concept_lower.split())):
                
                suggestions.append({
                    'concept': concept,
                    'category': category,
                    'score': calculate_relevance_score(search_lower, concept_lower)
                })
    
    # Trier par score de pertinence
    suggestions.sort(key=lambda x: x['score'], reverse=True)
    
    return suggestions[:max_suggestions]

def calculate_relevance_score(search: str, concept: str) -> int:
    """Calcule un score de pertinence pour le tri des suggestions"""
    score = 0
    
    # Correspondance exacte
    if search == concept:
        score += 100
    # Commence par le terme
    elif concept.startswith(search):
        score += 80
    # Mot complet qui commence par le terme
    elif any(word.startswith(search) for word in concept.split()):
        score += 60
    # Contient le terme
    elif search in concept:
        score += 40
    
    # Bonus pour les termes courts (plus sp√©cifiques)
    score += max(0, 20 - len(concept))
    
    return score

def smart_annotation_input(key_prefix: str = "annotation", max_tags: int = 10) -> List[str]:
    """
    Interface de saisie d'annotations avec autocompl√©tion intelligente
    
    Args:
        key_prefix: Pr√©fixe pour les cl√©s Streamlit
        max_tags: Nombre maximum de tags
    
    Returns:
        Liste des annotations s√©lectionn√©es
    """
    
    # Initialiser l'√©tat si n√©cessaire
    if f'{key_prefix}_selected_tags' not in st.session_state:
        st.session_state[f'{key_prefix}_selected_tags'] = []
    if f'{key_prefix}_search_term' not in st.session_state:
        st.session_state[f'{key_prefix}_search_term'] = ""
    
    selected_tags = st.session_state[f'{key_prefix}_selected_tags']
    
    # Afficher les tags d√©j√† s√©lectionn√©s
    if selected_tags:
        st.markdown("**üè∑Ô∏è Annotations s√©lectionn√©es:**")
        
        # Afficher les tags avec possibilit√© de suppression
        cols = st.columns(min(len(selected_tags), 4))
        for idx, tag in enumerate(selected_tags):
            with cols[idx % len(cols)]:
                if st.button(f"‚ùå {tag}", key=f"{key_prefix}_remove_{idx}"):
                    st.session_state[f'{key_prefix}_selected_tags'].remove(tag)
                    st.rerun()
    
    # Zone de recherche avec autocompl√©tion
    if len(selected_tags) < max_tags:
        col1, col2 = st.columns([4, 1])
        
        with col1:
            search_term = st.text_input(
                "üîç Rechercher une annotation",
                value=st.session_state[f'{key_prefix}_search_term'],
                placeholder="Tapez au moins 2 caract√®res...",
                key=f"{key_prefix}_search_input",
                help="Commencez √† taper pour voir les suggestions de l'ontologie ECG"
            )
            
            # Mettre √† jour le terme de recherche dans session_state
            if search_term != st.session_state[f'{key_prefix}_search_term']:
                st.session_state[f'{key_prefix}_search_term'] = search_term
        
        with col2:
            if st.button("‚ûï Texte libre", key=f"{key_prefix}_free_text"):
                if search_term and search_term not in selected_tags:
                    st.session_state[f'{key_prefix}_selected_tags'].append(search_term)
                    st.session_state[f'{key_prefix}_search_term'] = ""
                    st.rerun()
        
        # Afficher les suggestions
        if search_term and len(search_term) >= 2:
            suggestions = get_filtered_suggestions(
                search_term, 
                set(selected_tags),
                max_suggestions=8
            )
            
            if suggestions:
                st.markdown("**üí° Suggestions de l'ontologie:**")
                
                # Afficher les suggestions group√©es par cat√©gorie
                categories_shown = set()
                for suggestion in suggestions:
                    category = suggestion['category']
                    concept = suggestion['concept']
                    
                    # Afficher la cat√©gorie si c'est la premi√®re fois
                    if category not in categories_shown:
                        st.caption(f"**{category.upper()}**")
                        categories_shown.add(category)
                    
                    # Bouton pour ajouter le concept
                    if st.button(
                        f"‚ûï {concept}",
                        key=f"{key_prefix}_add_{concept}",
                        help=f"Ajouter '{concept}' aux annotations"
                    ):
                        st.session_state[f'{key_prefix}_selected_tags'].append(concept)
                        st.session_state[f'{key_prefix}_search_term'] = ""
                        st.rerun()
            else:
                st.info("üí° Aucune suggestion trouv√©e. Utilisez 'Texte libre' pour ajouter votre propre annotation.")
    else:
        st.warning(f"‚ö†Ô∏è Limite de {max_tags} annotations atteinte")
    
    return selected_tags

def display_annotation_summary(annotations: List[str], title: str = "R√©sum√© des annotations"):
    """
    Affiche un r√©sum√© visuel des annotations s√©lectionn√©es
    
    Args:
        annotations: Liste des annotations
        title: Titre de la section
    """
    if annotations:
        st.markdown(f"### {title}")
        
        # Grouper par cat√©gorie
        categorized = {}
        uncategorized = []
        
        for annotation in annotations:
            found = False
            for category, concepts in ECG_ONTOLOGY.items():
                if annotation in concepts:
                    if category not in categorized:
                        categorized[category] = []
                    categorized[category].append(annotation)
                    found = True
                    break
            
            if not found:
                uncategorized.append(annotation)
        
        # Afficher par cat√©gorie
        for category, items in categorized.items():
            st.markdown(f"**{category.upper()}**")
            for item in items:
                st.markdown(f"‚Ä¢ {item}")
        
        # Afficher les annotations libres
        if uncategorized:
            st.markdown("**AUTRES**")
            for item in uncategorized:
                st.markdown(f"‚Ä¢ {item}")

def export_annotations_to_json(annotations: List[str], case_id: str) -> str:
    """
    Exporte les annotations au format JSON
    
    Args:
        annotations: Liste des annotations
        case_id: Identifiant du cas
    
    Returns:
        JSON string des annotations
    """
    export_data = {
        'case_id': case_id,
        'annotations': annotations,
        'timestamp': st.session_state.get('annotation_timestamp', ''),
        'annotator': st.session_state.get('user_info', {}).get('name', 'Unknown')
    }
    
    return json.dumps(export_data, ensure_ascii=False, indent=2)

# Pour compatibilit√© avec l'ancien code
def get_annotation_suggestions(search_term: str) -> List[str]:
    """Fonction de compatibilit√© pour l'ancien code"""
    suggestions = get_filtered_suggestions(search_term, set(), max_suggestions=10)
    return [s['concept'] for s in suggestions]