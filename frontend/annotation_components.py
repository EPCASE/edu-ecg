#!/usr/bin/env python3
"""
Composants d'annotation semi-automatique avec ontologie ECG
"""

import streamlit as st
from pathlib import Path
import json

def smart_annotation_input(key_prefix="annotation", max_tags=10):
    """
    Interface de saisie semi-automatique d'annotations avec l'ontologie
    
    Args:
        key_prefix: Pr√©fixe pour les cl√©s de session
        max_tags: Nombre maximum de tags autoris√©s
    
    Returns:
        list: Liste des annotations s√©lectionn√©es
    """
    
    # Initialiser les annotations dans la session
    if f'{key_prefix}_tags' not in st.session_state:
        st.session_state[f'{key_prefix}_tags'] = []
    
    # R√©cup√©rer les concepts de l'ontologie
    concepts = get_ontology_concepts()
    
    st.markdown("### üè∑Ô∏è Annotations ECG")
    st.markdown("*Saisissez des mots-cl√©s pour rechercher dans l'ontologie m√©dicale*")
    
    # Zone de saisie avec autocompl√©tion
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Input pour rechercher dans l'ontologie
        search_term = st.text_input(
            "üîç Rechercher un concept m√©dical",
            placeholder="Ex: rythme, tachycardie, fibrillation...",
            key=f"{key_prefix}_search",
            help="Tapez pour rechercher dans l'ontologie de 281 concepts ECG"
        )
    
    with col2:
        # Bouton pour ajouter le terme personnalis√©
        if st.button("‚ûï Ajouter", key=f"{key_prefix}_add_custom"):
            if search_term and search_term not in st.session_state[f'{key_prefix}_tags']:
                if len(st.session_state[f'{key_prefix}_tags']) < max_tags:
                    st.session_state[f'{key_prefix}_tags'].append(search_term)
                    st.rerun()
                else:
                    st.warning(f"‚ö†Ô∏è Maximum {max_tags} annotations autoris√©es")
    
    # Suggestions bas√©es sur la recherche
    if search_term:
        suggestions = search_ontology_concepts(concepts, search_term)
        
        if suggestions:
            st.markdown("**üí° Suggestions de l'ontologie :**")
            
            # Afficher les suggestions en colonnes
            cols = st.columns(min(3, len(suggestions)))
            
            for i, suggestion in enumerate(suggestions[:6]):  # Limiter √† 6 suggestions
                col_idx = i % len(cols)
                with cols[col_idx]:
                    if st.button(
                        f"‚ú® {suggestion}", 
                        key=f"{key_prefix}_suggestion_{i}",
                        help=f"Ajouter '{suggestion}' aux annotations"
                    ):
                        if suggestion not in st.session_state[f'{key_prefix}_tags']:
                            if len(st.session_state[f'{key_prefix}_tags']) < max_tags:
                                st.session_state[f'{key_prefix}_tags'].append(suggestion)
                                st.rerun()
                            else:
                                st.warning(f"‚ö†Ô∏è Maximum {max_tags} annotations autoris√©es")
        else:
            st.info("üí≠ Aucun concept trouv√© dans l'ontologie - vous pouvez ajouter ce terme personnalis√©")
    
    # Affichage des annotations actuelles
    current_tags = st.session_state[f'{key_prefix}_tags']
    
    if current_tags:
        st.markdown("**üè∑Ô∏è Annotations s√©lectionn√©es :**")
        
        # Afficher les tags avec boutons de suppression
        cols = st.columns(min(4, len(current_tags)))
        
        for i, tag in enumerate(current_tags):
            col_idx = i % len(cols)
            with cols[col_idx]:
                col_tag, col_del = st.columns([3, 1])
                
                with col_tag:
                    # V√©rifier si c'est un concept de l'ontologie
                    is_ontology = tag.lower() in [c.lower() for c in concepts]
                    icon = "üß†" if is_ontology else "üìù"
                    st.markdown(f"{icon} **{tag}**")
                
                with col_del:
                    if st.button("‚ùå", key=f"{key_prefix}_remove_{i}", help=f"Supprimer '{tag}'"):
                        st.session_state[f'{key_prefix}_tags'].remove(tag)
                        st.rerun()
    else:
        st.info("üí≠ Aucune annotation s√©lectionn√©e")
    
    return st.session_state[f'{key_prefix}_tags']

def search_ontology_concepts(concepts, search_term):
    """
    Recherche dans les concepts de l'ontologie
    
    Args:
        concepts: Liste des concepts disponibles
        search_term: Terme √† rechercher
    
    Returns:
        list: Liste des concepts correspondants
    """
    if not search_term or len(search_term) < 2:
        return []
    
    search_lower = search_term.lower()
    matches = []
    
    # Recherche exacte en priorit√©
    for concept in concepts:
        if search_lower in concept.lower():
            matches.append(concept)
    
    # Trier par pertinence (correspondance au d√©but du mot en premier)
    matches.sort(key=lambda x: (
        not x.lower().startswith(search_lower),  # Commence par le terme
        not search_lower in x.lower().split()[0],  # Premier mot contient le terme
        len(x)  # Plus court en premier
    ))
    
    return matches[:10]  # Limiter √† 10 suggestions


def get_ontology_concepts():
    """
    R√©cup√®re la liste des concepts de l'ontologie depuis la session ou charge depuis le fichier
    
    Returns:
        list: Liste des concepts ECG
    """
    
    # Essayer de r√©cup√©rer depuis la session state
    if 'concepts' in st.session_state:
        return st.session_state.concepts
    
    # Charger depuis le fichier ontologie si disponible
    try:
        ontology_path = Path(__file__).parent.parent / "data" / "ontologie.owx"
        if ontology_path.exists():
            # Si on a un corrector en session, utiliser ses concepts
            if 'corrector' in st.session_state:
                return list(st.session_state.corrector.concepts.keys())
    except Exception:
        pass
    
    # Fallback : concepts de base
    return [
        "Rythme sinusal", "Tachycardie", "Bradycardie", "Fibrillation atriale",
        "Flutter atrial", "Extrasystole", "Bloc AV", "QRS large", "QRS fin",
        "Onde P", "Intervalle PR", "Segment ST", "Onde T", "Intervalle QT",
        "Axe normal", "D√©viation axiale gauche", "D√©viation axiale droite",
        "Hypertrophie VG", "Hypertrophie VD", "Isch√©mie", "L√©sion", "N√©crose"
    ]


def display_annotation_summary(annotations, title="üìã R√©sum√© des annotations"):
    """
    Affiche un r√©sum√© des annotations avec classification
    
    Args:
        annotations: Liste des annotations
        title: Titre de la section
    """
    
    if not annotations:
        st.info("üí≠ Aucune annotation disponible")
        return
    
    st.markdown(f"### {title}")
    
    concepts = get_ontology_concepts()
    
    # Classifier les annotations
    ontology_annotations = []
    custom_annotations = []
    
    for annotation in annotations:
        if annotation.lower() in [c.lower() for c in concepts]:
            ontology_annotations.append(annotation)
        else:
            custom_annotations.append(annotation)
    
    # Affichage des annotations ontologiques
    if ontology_annotations:
        st.markdown("**üß† Concepts ontologiques :**")
        for annotation in ontology_annotations:
            st.markdown(f"- üß† {annotation}")
    
    # Affichage des annotations personnalis√©es
    if custom_annotations:
        st.markdown("**üìù Annotations personnalis√©es :**")
        for annotation in custom_annotations:
            st.markdown(f"- üìù {annotation}")
    
    # Statistiques
    total = len(annotations)
    ontology_count = len(ontology_annotations)
    custom_count = len(custom_annotations)
    
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üìä Total", total)
    
    with col2:
        st.metric("üß† Ontologie", ontology_count)
    
    with col3:
        st.metric("üìù Personnalis√©", custom_count)


def validate_annotations(annotations):
    """
    Valide et nettoie une liste d'annotations
    
    Args:
        annotations: Liste des annotations √† valider
    
    Returns:
        tuple: (annotations_valides, annotations_invalides)
    """
    
    valid_annotations = []
    invalid_annotations = []
    
    for annotation in annotations:
        # Nettoyage basique
        cleaned = annotation.strip()
        
        # Validation
        if len(cleaned) >= 2 and len(cleaned) <= 100:
            valid_annotations.append(cleaned)
        else:
            invalid_annotations.append(annotation)
    
    return valid_annotations, invalid_annotations


def export_annotations_to_json(annotations, metadata=None):
    """
    Exporte les annotations au format JSON
    
    Args:
        annotations: Liste des annotations
        metadata: M√©tadonn√©es additionnelles
    
    Returns:
        str: JSON format√©
    """
    
    export_data = {
        "annotations": annotations,
        "count": len(annotations),
        "export_date": str(st.session_state.get('current_time', 'unknown')),
        "metadata": metadata or {}
    }
    
    return json.dumps(export_data, indent=2, ensure_ascii=False)


def import_annotations_from_json(json_data):
    """
    Importe des annotations depuis du JSON
    
    Args:
        json_data: Donn√©es JSON √† importer
    
    Returns:
        list: Liste des annotations import√©es
    """
    
    try:
        data = json.loads(json_data) if isinstance(json_data, str) else json_data
        return data.get('annotations', [])
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'import : {e}")
        return []
