#!/usr/bin/env python3
"""
üßπ Script de Nettoyage des Fichiers Inutiles - Projet ECG
Supprime automatiquement les fichiers obsol√®tes et de d√©veloppement
Conserve uniquement les fichiers essentiels pour la production
"""

import os
import sys
from pathlib import Path
from datetime import datetime

def get_files_to_delete():
    """Retourne la liste des fichiers √† supprimer"""
    
    # 1. Fichiers de test obsol√®tes (22 fichiers)
    test_files = [
        "test_auth.py",
        "test_auth_sans_reload.py", 
        "test_caliper_debug.py",
        "test_caliper_ep_cases.py",
        "test_correction_double_chargement.py",
        "test_mode_defaut.py",
        "test_mode_standard_defaut.py",
        "test_modifications_v2.py",
        "test_nouvelles_fonctionnalites.py",
        "test_nouvelles_fonctionnalites.bat",
        "test_permissions.py",
        "test_popup_suppression.py",
        "test_simplification_liseuse.py",
        "test_suppression_doublons_users.py",
        "test_suppression_grille.py",
        "test_suppression_panneau_info.py",
        "test_suppression_texte_mode.py",
        "test_visualiseur_ecg.py",
        "test_visualiseur_simple.py",
        "test_zoom_fix.py"
    ]
    
    # 2. Scripts de d√©ploiement obsol√®tes (8 fichiers)
    deploy_files = [
        "app.json",
        "Procfile", 
        "runtime.txt",
        "requirements_cloud.txt",
        "deploy_direct_scalingo.bat",
        "deploy_scalingo.bat",
        "change_scalingo_name.bat",
        "setup_github.bat",
        "push_to_github.bat"
    ]
    
    # 3. Fichiers de d√©monstration/d√©veloppement (7 fichiers)
    demo_files = [
        "demo_enhanced_import.py",
        "demo_visualiseur_avance.py",
        "install_analytics.py",
        "install_analytics.bat", 
        "prepare_scalingo.py",
        "cleanup.bat"
    ]
    
    # 4. Documentation obsol√®te (6 fichiers)
    doc_files = [
        "GUIDE_SCALINGO_DEPLOY.md",
        "READY_FOR_SCALINGO.md",
        "GUIDE_TEST_VISUALISEUR.md", 
        "RESUME_VISUALISEUR_AVANCE.md",
        "CHANGELOG_NETTOYAGE.md",
        "NETTOYAGE_COMPLET.md"
    ]
    
    # 5. Scripts de lancement redondants (4 fichiers)
    launcher_files = [
        "launch_auth.py",
        "launch_auth.bat",
        "start_avec_visualiseur.py", 
        "start_avec_visualiseur.bat"
    ]
    
    return {
        "Tests obsol√®tes": test_files,
        "D√©ploiement obsol√®te": deploy_files, 
        "D√©mos/D√©veloppement": demo_files,
        "Documentation obsol√®te": doc_files,
        "Lanceurs redondants": launcher_files
    }

def show_files_summary(files_to_delete):
    """Affiche un r√©sum√© des fichiers √† supprimer"""
    
    print("üóÇÔ∏è  R√âSUM√â DES FICHIERS √Ä SUPPRIMER")
    print("=" * 50)
    
    total_files = 0
    total_size = 0
    
    for category, files in files_to_delete.items():
        existing_files = [f for f in files if os.path.exists(f)]
        if existing_files:
            print(f"\nüìÅ {category} ({len(existing_files)} fichiers):")
            category_size = 0
            for file in existing_files:
                size = os.path.getsize(file)
                category_size += size
                print(f"   ‚ùå {file:<40} {size:>8} bytes")
            
            total_files += len(existing_files)
            total_size += category_size
            print(f"   üìä Sous-total: {category_size:>6} bytes")
    
    print(f"\n" + "=" * 50)
    print(f"üìä TOTAL: {total_files} fichiers ‚Ä¢ {total_size:,} bytes ({total_size/1024:.1f} KB)")
    print("=" * 50)
    
    return total_files, total_size

def delete_files(files_to_delete):
    """Supprime les fichiers obsol√®tes"""
    
    deleted_files = []
    deleted_size = 0
    errors = []
    
    print("\nüóëÔ∏è  SUPPRESSION EN COURS...")
    print("-" * 30)
    
    for category, files in files_to_delete.items():
        print(f"\nüìÅ {category}:")
        
        for file in files:
            if os.path.exists(file):
                try:
                    size = os.path.getsize(file)
                    os.remove(file)
                    deleted_files.append(file)
                    deleted_size += size
                    print(f"   ‚úÖ {file}")
                except Exception as e:
                    errors.append(f"{file}: {e}")
                    print(f"   ‚ùå {file} - ERREUR: {e}")
            else:
                print(f"   ‚ö™ {file} - n'existe pas")
    
    return deleted_files, deleted_size, errors

def create_cleanup_report(deleted_files, deleted_size):
    """Cr√©e un rapport de nettoyage"""
    
    report_content = f"""# üßπ Rapport de Nettoyage - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìä R√©sultats

- **Fichiers supprim√©s** : {len(deleted_files)}
- **Espace lib√©r√©** : {deleted_size:,} bytes ({deleted_size/1024:.1f} KB)
- **Status** : ‚úÖ Nettoyage r√©ussi

## üìã Fichiers supprim√©s

"""
    for file in sorted(deleted_files):
        report_content += f"- ‚ùå `{file}`\n"
    
    report_content += f"""

## ‚úÖ Fichiers conserv√©s (essentiels)

- ‚úÖ `README.md` - Documentation principale
- ‚úÖ `start.py` + `start.bat` - Lanceurs principaux
- ‚úÖ `stop_app.bat` - Arr√™t application  
- ‚úÖ `requirements.txt` + `requirements_full.txt` - D√©pendances
- ‚úÖ `frontend/` - Interface utilisateur
- ‚úÖ `backend/` - Logique m√©tier
- ‚úÖ `data/` - Donn√©es ECG et ontologie
- ‚úÖ `users/` - Profils utilisateurs
- ‚úÖ `docs/` - Documentation projet

## üöÄ Projet optimis√©

Le projet ECG est maintenant nettoy√© et pr√™t pour la production !

- **Structure simplifi√©e** ‚úÖ
- **Fichiers obsol√®tes supprim√©s** ‚úÖ  
- **Fonctionnalit√©s principales pr√©serv√©es** ‚úÖ
- **Performance am√©lior√©e** ‚úÖ

---
*Nettoyage automatique effectu√© avec succ√®s*
"""
    
    with open("RAPPORT_NETTOYAGE.md", "w", encoding="utf-8") as f:
        f.write(report_content)
    
    return "RAPPORT_NETTOYAGE.md"

def main():
    """Fonction principale de nettoyage"""
    
    print("üßπ" + "=" * 60)
    print("    NETTOYAGE AUTOMATIQUE - PROJET ECG")
    print("=" * 60 + "üßπ")
    print()
    
    # 1. V√©rifier qu'on est dans le bon r√©pertoire
    if not os.path.exists("frontend") or not os.path.exists("README.md"):
        print("‚ùå ERREUR: Ce script doit √™tre ex√©cut√© depuis la racine du projet ECG")
        sys.exit(1)
    
    # 2. Obtenir la liste des fichiers √† supprimer
    files_to_delete = get_files_to_delete()
    
    # 3. Afficher le r√©sum√©
    total_files, total_size = show_files_summary(files_to_delete)
    
    if total_files == 0:
        print("\n‚úÖ Aucun fichier obsol√®te trouv√© - Le projet est d√©j√† propre !")
        return
    
    # 4. Demander confirmation
    print(f"\nü§î CONFIRMATION REQUISE")
    print(f"   Supprimer {total_files} fichiers obsol√®tes ({total_size/1024:.1f} KB) ?")
    print(f"   Les fonctionnalit√©s principales seront pr√©serv√©es.")
    print()
    
    response = input("   Confirmer la suppression ? (oui/non): ").lower().strip()
    
    if response not in ['oui', 'o', 'yes', 'y']:
        print("\n‚ùå Nettoyage annul√© par l'utilisateur")
        return
    
    # 5. Supprimer les fichiers
    deleted_files, deleted_size, errors = delete_files(files_to_delete)
    
    # 6. Afficher les r√©sultats
    print(f"\n" + "=" * 50)
    print(f"üéâ NETTOYAGE TERMIN√â !")
    print(f"‚úÖ {len(deleted_files)} fichiers supprim√©s")
    print(f"üíæ {deleted_size:,} bytes lib√©r√©s ({deleted_size/1024:.1f} KB)")
    
    if errors:
        print(f"‚ö†Ô∏è  {len(errors)} erreurs:")
        for error in errors:
            print(f"   - {error}")
    
    # 7. Cr√©er le rapport
    report_file = create_cleanup_report(deleted_files, deleted_size)
    print(f"üìã Rapport cr√©√©: {report_file}")
    
    # 8. Afficher les fichiers restants
    print(f"\nüìÅ FICHIERS RESTANTS √Ä LA RACINE:")
    remaining_files = [f for f in os.listdir(".") if f.endswith(('.py', '.bat', '.md'))]
    for file in sorted(remaining_files):
        print(f"   ‚úÖ {file}")
    
    print(f"\nüöÄ Le projet ECG est maintenant optimis√© et pr√™t pour la production !")
    print(f"   Utilisez 'python start.py' pour lancer l'application")

if __name__ == "__main__":
    main()
