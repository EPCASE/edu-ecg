#!/usr/bin/env python3
"""
Script de pr√©paration pour le d√©ploiement Scalingo
V√©rifie que tout est pr√™t pour le d√©ploiement
"""

import os
import sys
import subprocess

def check_file_exists(filepath, description):
    """V√©rifie qu'un fichier existe"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description} manquant: {filepath}")
        return False

def check_git_repo():
    """V√©rifie que le repository git est initialis√©"""
    if os.path.exists('.git'):
        print("‚úÖ Repository git initialis√©")
        return True
    else:
        print("‚ùå Repository git non initialis√©")
        print("   Ex√©cutez: git init")
        return False

def check_dependencies():
    """V√©rifie que les d√©pendances principales sont disponibles"""
    try:
        import streamlit
        print(f"‚úÖ Streamlit {streamlit.__version__} install√©")
        
        import pandas
        print(f"‚úÖ Pandas {pandas.__version__} install√©")
        
        import numpy
        print(f"‚úÖ Numpy {numpy.__version__} install√©")
        
        return True
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        return False

def main():
    """V√©rification compl√®te avant d√©ploiement"""
    print("üöÄ V√©rification pr√©-d√©ploiement Scalingo")
    print("=" * 50)
    
    checks = []
    
    # V√©rifier les fichiers essentiels
    checks.append(check_file_exists("Procfile", "Procfile"))
    checks.append(check_file_exists("runtime.txt", "Runtime Python"))
    checks.append(check_file_exists("requirements.txt", "Requirements"))
    checks.append(check_file_exists("app.json", "Configuration Scalingo"))
    checks.append(check_file_exists("frontend/app.py", "Application principale"))
    
    # V√©rifier la structure
    checks.append(check_file_exists("data/ontologie.owx", "Ontologie ECG"))
    checks.append(check_file_exists("backend/correction_engine.py", "Moteur de correction"))
    
    # V√©rifier git
    checks.append(check_git_repo())
    
    # V√©rifier les d√©pendances
    checks.append(check_dependencies())
    
    print("\n" + "=" * 50)
    
    if all(checks):
        print("üéâ PR√äT POUR LE D√âPLOIEMENT!")
        print("\nCommandes de d√©ploiement:")
        print("1. git add .")
        print("2. git commit -m 'Version pr√™te pour Scalingo'")
        print("3. git push scalingo main")
        print("\nConsultez GUIDE_SCALINGO_DEPLOY.md pour les d√©tails")
        return 0
    else:
        print("‚ùå Probl√®mes d√©tect√©s - r√©solvez-les avant le d√©ploiement")
        return 1

if __name__ == "__main__":
    sys.exit(main())
